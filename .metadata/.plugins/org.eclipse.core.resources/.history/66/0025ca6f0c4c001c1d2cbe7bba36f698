package com.uni.variable;

import sun.jvm.hotspot.tools.SysPropsDumper;

public class D_Cast {
	// 형변환 : 값의 자료형을 바꾸는 것
		/*
		 *  * 컴퓨터에서의 값 처리 규칙 (즉, 형 변환이 필요한 상황)
		 *  1. 대입 연산자를 기준으로 왼쪽과 오른쪽은 같은 자료형이여야된다. 
		 *  --> 즉, 같은 자료형에 해당하는 값만 대입이 가능하다. 다른 자료형의 값을 대입하고자 한다면 형변환이 필수
		 *      자료형 변수명 = (자료형)값;
		 *  
		 *  2. 같은 자료형끼리만 계산이 가능 --> 계산 결과도 같은 자료형으로 나옴!
		 *     값 + 값		=> 두 값이 같은 자료형이여야됨!
		 *  
		 *  * 형 변환의 종류
		 *  1. 자동 형변환	--> 자동으로 형변환이 이루어져 우리가 형변환을 시켜줄 필요 없다. 
		 *  
		 *  2. 강제(명시적) 형변환 --> 자동으로 형변환이 안되서 우리가 직접 형변환을 해줘야됨
		 *  
		 *     [표현법] (바꿀자료형)값
		 *     
		 *     (바꿀자료형) 을 cast연산자 즉, 형변환 연산자라고 함
		 *  
		 *  * 주의사항
		 *  boolean은 형변환이 불가하다 오직 true, false의 값만을 가질 수 있다. 
		 *  
		 */
	
	
	public void rul1() {
		/*
		 * 자동형변환 :
		 * 값의 범위가 작은 자료형과 큰자료형 간의 연산 (대입, 계산) 시 컴파일러가 자동으로 범위가 작은 자료형을 큰자료형으로 변환처리 해준다.
		 */
		short s= 1;
		int i = s; //분명히 대입 연산자를(=) 기준으로  왼쪽과 오른쪽의 자료형이 다르지만 문제없음.
		
		//1.int(4byte)->double(8byte)
		int i1= 12;
		System.out.println("i1 : "+ i1);
		
		double d1 = i1;
		System.out.println("d1 : "+ d1);
		
		int i2 = 12;
		double d2 =3.3;
		
		double result = i2+d2;
		System.out.println("result " + result);
	}
}
